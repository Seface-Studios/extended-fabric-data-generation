plugins {
  id 'java'
  id 'java-library'
  id "fabric-loom" version "${fabric_loom_version}"
}

group = 'net.sefacestudios'
version = project_version

repositories {
  mavenCentral()
  maven { url 'https://jitpack.io' }

  maven {
    name = "ParchmentMC"
    url = uri("https://maven.parchmentmc.org")
    content {
      includeGroupAndSubgroups("org.parchmentmc")
    }
  }
}

dependencies {
  minecraft "com.mojang:minecraft:${minecraft_version}"

  mappings(loom.layered() {
    officialMojangMappings()
    parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchmentmc_version}@zip")
    //mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
  })

  modApi "net.fabricmc:fabric-loader:${fabric_loader_version}"
  modApi "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
  implementation "com.github.crowdin:crowdin-api-client-java:${crowdin_version}"
}

sourceSets {
  testmod {
    compileClasspath += main.compileClasspath
    runtimeClasspath += main.runtimeClasspath

    // Adicionar o sourceSet main como dependência
    compileClasspath += main.output
    runtimeClasspath += main.output

    resources {
      srcDirs("src/testmod/generated")
    }
  }
}

fabricApi {
  configureDataGeneration((settings) -> {
    settings.client = true
    settings.getOutputDirectory().set(project(":").file("src/testmod/generated"))
  })
}

runDatagen {
  outputs.dir file("src/testmod/generated")
  classpath += sourceSets.testmod.runtimeClasspath

  // Loads a private gradle.properties with the test API Token
  def privateProperties = file(".gradle/gradle.properties")
  def localProps = new Properties()

  if (privateProperties.exists()) {
    privateProperties.withInputStream { stream ->
      localProps.load(stream)
    }
  }

  def token = localProps.getProperty("crowdin_token")
  def project_id = localProps.getProperty("crowdin_project_id")
  def organization = localProps.getProperty("crowdin_organization")

  environment "CROWDIN_TOKEN", token
  environment "CROWDIN_PROJECT_ID", project_id
  environment "CROWDIN_ORGANIZATION", organization
}

// Configuração para JitPack
java {
  withSourcesJar()
  withJavadocJar()
}
